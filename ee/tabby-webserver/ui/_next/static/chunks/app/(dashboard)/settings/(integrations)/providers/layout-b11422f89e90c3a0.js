(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6807],{14375:function(n,e,t){"use strict";t.d(e,{j:function(){return s}});let r=n=>"boolean"==typeof n?"".concat(n):0===n?"0":n,i=function(){for(var n=arguments.length,e=Array(n),t=0;t<n;t++)e[t]=arguments[t];return e.flat(1/0).filter(Boolean).join(" ")},s=(n,e)=>t=>{var s;if((null==e?void 0:e.variants)==null)return i(n,null==t?void 0:t.class,null==t?void 0:t.className);let{variants:a,defaultVariants:o}=e,d=Object.keys(a).map(n=>{let e=null==t?void 0:t[n],i=null==o?void 0:o[n];if(null===e)return null;let s=r(e)||r(i);return a[n][s]}),u=t&&Object.entries(t).reduce((n,e)=>{let[t,r]=e;return void 0===r||(n[t]=r),n},{}),l=null==e?void 0:null===(s=e.compoundVariants)||void 0===s?void 0:s.reduce((n,e)=>{let{class:t,className:r,...i}=e;return Object.entries(i).every(n=>{let[e,t]=n;return Array.isArray(t)?t.includes({...o,...u}[e]):({...o,...u})[e]===t})?[...n,t,r]:n},[]);return i(n,d,l,null==t?void 0:t.class,null==t?void 0:t.className)}},59563:function(n,e,t){Promise.resolve().then(t.bind(t,69145)),Promise.resolve().then(t.bind(t,57830))},69145:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return p}});var r=t(36164),i=t(3546),s=t(70652),a=t.n(s),o=t(11978),d=t(14375),u=t(1544),l=t(63795),c=t(30601),f=t(11529);let m=(0,d.j)("flex items-center gap-1 rounded-lg px-3 py-2 transition-all hover:bg-accent",{variants:{state:{selected:"bg-accent","not-selected":""}},defaultVariants:{state:"not-selected"}});function p(n){let{className:e}=n,[t]=(0,c.Hb)(),i=t?{height:"calc(100vh - ".concat(c.wt," - 4rem)")}:{height:"calc(100vh - 4rem)"};return(0,r.jsxs)("div",{className:(0,u.cn)("sticky top-16 space-y-1 overflow-y-auto border-r pr-4 text-sm font-medium",e),style:i,children:[(0,r.jsx)(g,{href:"/settings/providers/git",children:"Git"}),f.K.map(n=>(0,r.jsx)(g,{href:"/settings/providers/".concat(n.name),children:n.meta.displayName},n.name)),(0,r.jsxs)(g,{href:"/settings/providers/doc",children:["Developer Docs",(0,r.jsx)(l.C,{variant:"outline",className:"h-3.5 border-secondary-foreground/60 px-1.5 text-[10px] text-secondary-foreground/60",children:"Beta"})]})]})}function g(n){let{href:e,children:t}=n,s=(0,o.usePathname)(),d=i.useMemo(()=>{var n;let t="/settings/providers/doc";if(null==s?void 0:s.startsWith(t))return e.startsWith(t);let r=null===(n=s.match(/^(\/settings\/providers\/[\w-]+)/))||void 0===n?void 0:n[1];return r===e},[s,e]);return(0,r.jsx)(a(),{className:m({state:d?"selected":"not-selected"}),href:e,children:t})}},11529:function(n,e,t){"use strict";t.d(e,{K:function(){return i}});var r=t(18500);let i=[{name:"github",enum:r.q6.Github,meta:{displayName:"GitHub"}},{name:"github-self-hosted",enum:r.q6.GithubSelfHosted,meta:{displayName:"GitHub Self-Hosted"}},{name:"gitlab",enum:r.q6.Gitlab,meta:{displayName:"GitLab"}},{name:"gitlab-self-hosted",enum:r.q6.GitlabSelfHosted,meta:{displayName:"GitLab Self-Hosted"}}]},30601:function(n,e,t){"use strict";t.d(e,{Hb:function(){return m},wt:function(){return l},xc:function(){return p},yo:function(){return f}});var r=t(36164),i=t(3546),s=t(74630),a=t(36327),o=t(80605),d=t(1544),u=t(81565);let l="3.5rem",c=i.createContext({}),f=n=>{let{children:e}=n,t=(0,o.UA)(),[a,d]=i.useState(!1);return i.useEffect(()=>{let n=window.self!==window.top;n||(0,s.Z)(t)||d(t)},[t]),(0,r.jsx)(c.Provider,{value:{isShowDemoBanner:a,setIsShowDemoBanner:d},children:e})};function m(){let{isShowDemoBanner:n,setIsShowDemoBanner:e}=i.useContext(c);return[n,e]}function p(){let[n,e]=m(),{data:t}=(0,a.Z)("https://api.github.com/repos/TabbyML/tabby",n=>fetch(n).then(n=>n.json()));return(0,r.jsxs)("div",{className:(0,d.cn)("flex items-center justify-between bg-primary px-4 text-primary-foreground transition-all md:px-5",{"opacity-100 pointer-events-auto":n,"opacity-0 pointer-events-none":!n}),style:n?{height:l}:{height:0},children:[(0,r.jsxs)("a",{href:"https://links.tabbyml.com/schedule-a-demo",target:"_blank",className:"flex items-center gap-x-2 text-xs font-semibold underline md:text-sm",children:[(0,r.jsx)("span",{children:"\uD83D\uDCC6"}),(0,r.jsx)("span",{children:"Book a 30-minute product demo."})]}),(0,r.jsxs)("div",{className:"flex items-center gap-x-4 md:gap-x-8",children:[(0,r.jsxs)("a",{href:"https://github.com/TabbyML/tabby",target:"_blank",className:"flex items-center transition-all hover:opacity-70",children:[(0,r.jsx)(u.IconGithub,{}),(0,r.jsxs)("div",{className:"ml-2 hidden md:block",children:[(0,r.jsx)("p",{className:"text-xs font-semibold",children:"TabbyML/tabby"}),(0,r.jsxs)("div",{className:(0,d.cn)("flex items-center text-xs transition-all",{"h-4 opacity-70":t,"h-0 opacity-0":!t}),children:[(0,r.jsx)(u.IconStar,{className:"mr-1 h-2.5 w-2.5"}),(0,r.jsx)("span",{children:null==t?void 0:t.stargazers_count}),(0,r.jsx)(u.IconGitFork,{className:"ml-2 mr-1 h-2.5 w-2.5"}),(0,r.jsx)("span",{children:null==t?void 0:t.forks_count})]})]})]}),(0,r.jsx)(u.IconClose,{className:"cursor-pointer transition-all hover:opacity-70",onClick:()=>e(!1)})]})]})}},63795:function(n,e,t){"use strict";t.d(e,{C:function(){return o}});var r=t(36164);t(3546);var i=t(14375),s=t(1544);let a=(0,i.j)("inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",{variants:{variant:{default:"border-transparent bg-primary text-primary-foreground hover:bg-primary/80",secondary:"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",destructive:"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",successful:"border-transparent bg-successful text-successful-foreground hover:bg-successful/80",outline:"text-foreground"}},defaultVariants:{variant:"default"}});function o(n){let{className:e,variant:t,...i}=n;return(0,r.jsx)("div",{className:(0,s.cn)(a({variant:t}),e),...i})}},57830:function(n,e,t){"use strict";t.r(e),t.d(e,{ScrollArea:function(){return o},ScrollBar:function(){return d}});var r=t(36164),i=t(3546),s=t(50778),a=t(1544);let o=i.forwardRef((n,e)=>{let{className:t,children:i,...o}=n;return(0,r.jsxs)(s.fC,{ref:e,className:(0,a.cn)("relative overflow-hidden",t),...o,children:[(0,r.jsx)(s.l_,{className:"h-full w-full rounded-[inherit] [&>div]:!block",children:i}),(0,r.jsx)(d,{}),(0,r.jsx)(s.Ns,{})]})});o.displayName=s.fC.displayName;let d=i.forwardRef((n,e)=>{let{className:t,orientation:i="vertical",...o}=n;return(0,r.jsx)(s.gb,{ref:e,orientation:i,className:(0,a.cn)("flex touch-none select-none transition-colors","vertical"===i&&"h-full w-2.5 border-l border-l-transparent p-[1px]","horizontal"===i&&"h-2.5 flex-col border-t border-t-transparent p-[1px]",t),...o,children:(0,r.jsx)(s.q4,{className:"relative flex-1 rounded-full bg-border"})})});d.displayName=s.gb.displayName},75561:function(n,e,t){"use strict";t.d(e,{B:function(){return s}});var r=t(18500);let i={"\n  query ListUserEvents(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $start: DateTime!\n    $end: DateTime!\n    $users: [ID!]\n  ) {\n    userEvents(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      start: $start\n      end: $end\n      users: $users\n    ) {\n      edges {\n        node {\n          id\n          userId\n          createdAt\n          kind\n          payload\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.UQ,"\n  mutation uploadUserAvatarBase64($id: ID!, $avatarBase64: String!) {\n    uploadUserAvatarBase64(id: $id, avatarBase64: $avatarBase64)\n  }\n":r.eI,"\n  mutation UpdateUserName($id: ID!, $name: String!) {\n    updateUserName(id: $id, name: $name)\n  }\n":r.DQ,"\n  mutation PasswordChange($input: PasswordChangeInput!) {\n    passwordChange(input: $input)\n  }\n":r.oZ,"\n  mutation updateEmailSetting($input: EmailSettingInput!) {\n    updateEmailSetting(input: $input)\n  }\n":r.gl,"\n  mutation deleteEmailSetting {\n    deleteEmailSetting\n  }\n":r.wZ,"\n  mutation SendTestEmail($to: String!) {\n    sendTestEmail(to: $to)\n  }\n":r.nI,"\n  query emailSetting {\n    emailSetting {\n      smtpUsername\n      smtpServer\n      fromAddress\n      encryption\n      authMethod\n      smtpPort\n    }\n  }\n":r.k6,"\n  mutation UpdateIntegration($input: UpdateIntegrationInput!) {\n    updateIntegration(input: $input)\n  }\n":r.fc,"\n  mutation DeleteIntegration($id: ID!, $kind: IntegrationKind!) {\n    deleteIntegration(id: $id, kind: $kind)\n  }\n":r.AU,"\n  mutation UpdateIntegratedRepositoryActive($id: ID!, $active: Boolean!) {\n    updateIntegratedRepositoryActive(id: $id, active: $active)\n  }\n":r.o7,"\n  mutation CreateIntegration($input: CreateIntegrationInput!) {\n    createIntegration(input: $input)\n  }\n":r.fY,"\n  mutation CreateCustomDocument($input: CreateCustomDocumentInput!) {\n    createCustomDocument(input: $input)\n  }\n":r.Gf,"\n  query CustomWebDocuments(\n    $ids: [ID!]\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    customWebDocuments(\n      ids: $ids\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          url\n          name\n          id\n          jobInfo {\n            lastJobRun {\n              id\n              job\n              createdAt\n              finishedAt\n              exitCode\n            }\n            command\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.wx,"\n  mutation DeleteCustomDocument($id: ID!) {\n    deleteCustomDocument(id: $id)\n  }\n":r.c3,"\n  query PresetWebDocuments(\n    $ids: [ID!]\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n    $isActive: Boolean\n  ) {\n    presetWebDocuments(\n      ids: $ids\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n      isActive: $isActive\n    ) {\n      edges {\n        node {\n          id\n          name\n          isActive\n          jobInfo {\n            lastJobRun {\n              id\n              job\n              createdAt\n              finishedAt\n              exitCode\n            }\n            command\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.z1,"\n  mutation SetPresetDocumentActive($input: SetPresetDocumentActiveInput!) {\n    setPresetDocumentActive(input: $input)\n  }\n":r.h_,"\n  mutation deleteGitRepository($id: ID!) {\n    deleteGitRepository(id: $id)\n  }\n":r.TS,"\n  mutation createGitRepository($name: String!, $gitUrl: String!) {\n    createGitRepository(name: $name, gitUrl: $gitUrl)\n  }\n":r.ad,"\n  mutation triggerJobRun($command: String!) {\n    triggerJobRun(command: $command)\n  }\n":r.uk,"\n  mutation updateOauthCredential($input: UpdateOAuthCredentialInput!) {\n    updateOauthCredential(input: $input)\n  }\n":r.m,"\n  mutation deleteOauthCredential($provider: OAuthProvider!) {\n    deleteOauthCredential(provider: $provider)\n  }\n":r.ZH,"\n  query OAuthCallbackUrl($provider: OAuthProvider!) {\n    oauthCallbackUrl(provider: $provider)\n  }\n":r.L$,"\n  query OAuthCredential($provider: OAuthProvider!) {\n    oauthCredential(provider: $provider) {\n      provider\n      clientId\n      createdAt\n      updatedAt\n    }\n  }\n":r.Fd,"\n  mutation updateNetworkSettingMutation($input: NetworkSettingInput!) {\n    updateNetworkSetting(input: $input)\n  }\n":r.rN,"\n  mutation updateSecuritySetting($input: SecuritySettingInput!) {\n    updateSecuritySetting(input: $input)\n  }\n":r.Nl,"\n  query SecuritySetting {\n    securitySetting {\n      allowedRegisterDomainList\n      disableClientSideTelemetry\n    }\n  }\n":r.rU,"\n  mutation UploadLicense($license: String!) {\n    uploadLicense(license: $license)\n  }\n":r.Yo,"\n  mutation ResetLicense {\n    resetLicense\n  }\n":r.d0,"\n  mutation CreateInvitation($email: String!) {\n    createInvitation(email: $email)\n  }\n":r.ib,"\n  mutation DeleteInvitation($id: ID!) {\n    deleteInvitation(id: $id)\n  }\n":r.YM,"\n  mutation updateUserRole($id: ID!, $isAdmin: Boolean!) {\n    updateUserRole(id: $id, isAdmin: $isAdmin)\n  }\n":r.XF,"\n  mutation UpdateUserActive($id: ID!, $active: Boolean!) {\n    updateUserActive(id: $id, active: $active)\n  }\n":r.dv,"\n  query GetRegistrationToken {\n    registrationToken\n  }\n":r.bh,"\n  mutation ResetRegistrationToken {\n    resetRegistrationToken\n  }\n":r.wW,"\n  query GetDiskUsageStats {\n    diskUsageStats {\n      events {\n        filepath\n        sizeKb\n      }\n      indexedRepositories {\n        filepath\n        sizeKb\n      }\n      database {\n        filepath\n        sizeKb\n      }\n      models {\n        filepath\n        sizeKb\n      }\n    }\n  }\n":r.xX,"\n  mutation ResetUserAuthToken {\n    resetUserAuthToken\n  }\n":r.qq,"\n  mutation passwordReset($input: PasswordResetInput!) {\n    passwordReset(input: $input)\n  }\n":r.vK,"\n  mutation requestPasswordResetEmail($input: RequestPasswordResetEmailInput!) {\n    requestPasswordResetEmail(input: $input)\n  }\n":r.i8,"\n  mutation requestInvitationEmail($input: RequestInvitationInput!) {\n    requestInvitationEmail(input: $input) {\n      email\n      code\n    }\n  }\n":r.S_,"\n  mutation tokenAuth($email: String!, $password: String!) {\n    tokenAuth(email: $email, password: $password) {\n      accessToken\n      refreshToken\n    }\n  }\n":r.UO,"\n  mutation register(\n    $name: String!\n    $email: String!\n    $password1: String!\n    $password2: String!\n    $invitationCode: String\n  ) {\n    register(\n      name: $name\n      email: $email\n      password1: $password1\n      password2: $password2\n      invitationCode: $invitationCode\n    ) {\n      accessToken\n      refreshToken\n    }\n  }\n":r.YR,"\n  query RepositoryGrep($id: ID!, $kind: RepositoryKind!, $query: String!) {\n    repositoryGrep(kind: $kind, id: $id, query: $query) {\n      files {\n        path\n        lines {\n          line {\n            text\n            base64\n          }\n          byteOffset\n          lineNumber\n          subMatches {\n            bytesStart\n            bytesEnd\n          }\n        }\n      }\n      elapsedMs\n    }\n  }\n":r.lq,"\n  query ListThreadMessages(\n    $threadId: ID!\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    threadMessages(\n      threadId: $threadId\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          id\n          threadId\n          role\n          content\n          attachment {\n            code {\n              gitUrl\n              filepath\n              language\n              content\n              startLine\n            }\n            clientCode {\n              filepath\n              content\n              startLine\n            }\n            doc {\n              title\n              link\n              content\n            }\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.f7,"\n  mutation SetThreadPersisted($threadId: ID!) {\n    setThreadPersisted(threadId: $threadId)\n  }\n":r.qu,"\n  query GetLicenseInfo {\n    license {\n      type\n      status\n      seats\n      seatsUsed\n      issuedAt\n      expiresAt\n    }\n  }\n":r.eZ,"\n  query MeQuery {\n    me {\n      id\n      authToken\n      email\n      isAdmin\n      isPasswordSet\n      name\n    }\n  }\n":r.fk,"\n  query NetworkSetting {\n    networkSetting {\n      externalUrl\n    }\n  }\n":r.m2,"\n  query GetServerInfo {\n    serverInfo {\n      isAdminInitialized\n      isEmailConfigured\n      isChatEnabled\n      allowSelfSignup\n      isDemoMode\n    }\n  }\n":r.a,"\n  subscription CreateThreadAndRun($input: CreateThreadAndRunInput!) {\n    createThreadAndRun(input: $input) {\n      threadCreated\n      threadUserMessageCreated\n      threadAssistantMessageCreated\n      threadRelevantQuestions\n      threadAssistantMessageAttachmentsCode {\n        code {\n          gitUrl\n          filepath\n          language\n          content\n          startLine\n        }\n        scores {\n          rrf\n          bm25\n          embedding\n        }\n      }\n      threadAssistantMessageAttachmentsDoc {\n        doc {\n          title\n          link\n          content\n        }\n        score\n      }\n      threadAssistantMessageContentDelta\n      threadAssistantMessageCompleted\n    }\n  }\n":r.VL,"\n  subscription CreateThreadRun($input: CreateThreadRunInput!) {\n    createThreadRun(input: $input) {\n      threadCreated\n      threadUserMessageCreated\n      threadAssistantMessageCreated\n      threadRelevantQuestions\n      threadAssistantMessageAttachmentsCode {\n        code {\n          gitUrl\n          filepath\n          language\n          content\n          startLine\n        }\n        scores {\n          rrf\n          bm25\n          embedding\n        }\n      }\n      threadAssistantMessageAttachmentsDoc {\n        doc {\n          title\n          link\n          content\n        }\n        score\n      }\n      threadAssistantMessageContentDelta\n      threadAssistantMessageCompleted\n    }\n  }\n":r.uM,"\n  mutation DeleteThreadMessagePair(\n    $threadId: ID!\n    $userMessageId: ID!\n    $assistantMessageId: ID!\n  ) {\n    deleteThreadMessagePair(\n      threadId: $threadId\n      userMessageId: $userMessageId\n      assistantMessageId: $assistantMessageId\n    )\n  }\n":r.ou,"\n  mutation refreshToken($refreshToken: String!) {\n    refreshToken(refreshToken: $refreshToken) {\n      accessToken\n      refreshToken\n    }\n  }\n":r.FR,"\n  mutation LogoutAllSessions {\n    logoutAllSessions\n  }\n":r.Il,"\n  query ListInvitations(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    invitations(after: $after, before: $before, first: $first, last: $last) {\n      edges {\n        node {\n          id\n          email\n          code\n          createdAt\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.Xx,"\n  query gitRepositories(\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    gitRepositories(\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          id\n          name\n          gitUrl\n          jobInfo {\n            lastJobRun {\n              id\n              job\n              createdAt\n              finishedAt\n              exitCode\n            }\n            command\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.Mi,"\n  query ListJobRuns(\n    $ids: [ID!]\n    $jobs: [String!]\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    jobRuns(\n      ids: $ids\n      jobs: $jobs\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          id\n          job\n          createdAt\n          startedAt\n          finishedAt\n          exitCode\n          stdout\n          stderr\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.$S,"\n  query GetJobRunStats($jobs: [String!]) {\n    jobRunStats(jobs: $jobs) {\n      success\n      failed\n      pending\n    }\n  }\n":r.np,"\n  query ListJobs {\n    jobs\n  }\n":r.Ax,"\n  query ListUsers($after: String, $before: String, $first: Int, $last: Int) {\n    users(after: $after, before: $before, first: $first, last: $last) {\n      edges {\n        node {\n          id\n          email\n          isAdmin\n          isOwner\n          createdAt\n          active\n          name\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.by,"\n  query DailyStatsInPastYear($users: [ID!]) {\n    dailyStatsInPastYear(users: $users) {\n      start\n      end\n      completions\n      selects\n      views\n    }\n  }\n":r.Wd,"\n  query DailyStats(\n    $start: DateTime!\n    $end: DateTime!\n    $users: [ID!]\n    $languages: [Language!]\n  ) {\n    dailyStats(start: $start, end: $end, users: $users, languages: $languages) {\n      start\n      end\n      completions\n      selects\n      views\n      language\n    }\n  }\n":r.Sm,"\n  query ListIntegrations(\n    $ids: [ID!]\n    $kind: IntegrationKind\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    integrations(\n      ids: $ids\n      kind: $kind\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          id\n          displayName\n          status\n          apiBase\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.KZ,"\n  query ListIntegratedRepositories(\n    $ids: [ID!]\n    $kind: IntegrationKind\n    $active: Boolean\n    $after: String\n    $before: String\n    $first: Int\n    $last: Int\n  ) {\n    integratedRepositories(\n      ids: $ids\n      kind: $kind\n      active: $active\n      after: $after\n      before: $before\n      first: $first\n      last: $last\n    ) {\n      edges {\n        node {\n          id\n          displayName\n          gitUrl\n          active\n          jobInfo {\n            lastJobRun {\n              id\n              job\n              createdAt\n              finishedAt\n              startedAt\n              exitCode\n            }\n            command\n          }\n        }\n        cursor\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n":r.qt,"\n  query RepositoryList {\n    repositoryList {\n      id\n      name\n      kind\n      gitUrl\n      refs {\n        name\n        commit\n      }\n    }\n  }\n":r.HC,"\n  query RepositorySearch(\n    $kind: RepositoryKind!\n    $id: ID!\n    $rev: String\n    $pattern: String!\n  ) {\n    repositorySearch(kind: $kind, id: $id, rev: $rev, pattern: $pattern) {\n      type\n      path\n      indices\n    }\n  }\n":r.BH,"\n  query ContextInfo {\n    contextInfo {\n      sources {\n        id\n        kind\n        sourceId\n        displayName\n      }\n    }\n  }\n":r.w4};function s(n){var e;return null!==(e=i[n])&&void 0!==e?e:{}}},43240:function(n,e,t){"use strict";t.d(e,{BX:function(){return r.B}});var r=t(75561)},80605:function(n,e,t){"use strict";t.d(e,{UA:function(){return c},Uw:function(){return u},c7:function(){return d},jJ:function(){return l},xG:function(){return o}});var r=t(40055),i=t(43240);let s=(0,i.BX)("\n  query GetServerInfo {\n    serverInfo {\n      isAdminInitialized\n      isEmailConfigured\n      isChatEnabled\n      allowSelfSignup\n      isDemoMode\n    }\n  }\n"),a=()=>{let[{data:n}]=(0,r.aM)({query:s});return null==n?void 0:n.serverInfo},o=()=>{var n;return null===(n=a())||void 0===n?void 0:n.isChatEnabled},d=()=>{var n;return null===(n=a())||void 0===n?void 0:n.isAdminInitialized},u=()=>{var n;return null===(n=a())||void 0===n?void 0:n.isEmailConfigured},l=()=>{var n;return null===(n=a())||void 0===n?void 0:n.allowSelfSignup},c=()=>{var n;return null===(n=a())||void 0===n?void 0:n.isDemoMode}},70652:function(n,e,t){n.exports=t(54007)},11978:function(n,e,t){n.exports=t(77280)},72205:function(n,e,t){"use strict";t.d(e,{WV:function(){return o},jH:function(){return d}});var r=t(65122),i=t(3546),s=t(30171),a=t(74047);let o=["a","button","div","form","h2","h3","img","input","label","li","nav","ol","p","span","svg","ul"].reduce((n,e)=>{let t=(0,i.forwardRef)((n,t)=>{let{asChild:s,...o}=n,d=s?a.g7:e;return(0,i.useEffect)(()=>{window[Symbol.for("radix-ui")]=!0},[]),(0,i.createElement)(d,(0,r.Z)({},o,{ref:t}))});return t.displayName=`Primitive.${e}`,{...n,[e]:t}},{});function d(n,e){n&&(0,s.flushSync)(()=>n.dispatchEvent(e))}},36327:function(n,e,t){"use strict";t.d(e,{Z:function(){return s}});var r=t(21454),i=t(54859);let s=(0,i.xD)(r.ZP,n=>(e,t,r)=>(r.revalidateOnFocus=!1,r.revalidateIfStale=!1,r.revalidateOnReconnect=!1,n(e,t,r)))}},function(n){n.O(0,[1386,5498,4007,8439,1454,778,1544,1565,3375,5289,1744],function(){return n(n.s=59563)}),_N_E=n.O()}]);